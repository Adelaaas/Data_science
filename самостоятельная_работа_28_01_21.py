# -*- coding: utf-8 -*-
"""Самостоятельная работа 28.01.21.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DKFZ5sqqeblUB97B7ON7RY0y7EpKlnQq
"""

import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import confusion_matrix
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression

from google.colab import files
uploaded = files.upload()

df = pd.read_csv("diabetes.csv")
df

#1
#Нормализированные данные
X = df.drop(['Outcome'], axis = 1)
y = df['Outcome']
scaler = MinMaxScaler()
X_nore = scaler.fit_transform(X)
X_train, X_test, y_train, y_test = train_test_split(X_nore, y, test_size = 0.3, random_state = 42)

scores = []
#1
for i in range(1, 15):

  knn = KNeighborsClassifier(i)
  knn.fit(X_train, y_train)

  answer = knn.predict(X_test)
  scores.append(knn.score(X_test, y_test))


print(scores)

#2
#Стандартизованные данные
X = df.drop(['Outcome'], axis = 1)
y = df['Outcome']
scaler = StandardScaler()
X_st = scaler.fit_transform(X)
X_train, X_test, y_train, y_test = train_test_split(X_st, y, test_size = 0.3, random_state = 42)

scores = []
#1
for i in range (1, 15):

  knn = KNeighborsClassifier(i)
  knn.fit(X_train, y_train)

  answer = knn.predict(X_test)
  scores.append(knn.score(X_test, y_test))

print(scores)

#3
#Логистическая регрессия нормализированных данных
X = df.drop(['Outcome'], axis = 1)
y = df['Outcome']
scaler = MinMaxScaler()
X_nore = scaler.fit_transform(X)
X_train, X_test, y_train, y_test = train_test_split(X_nore, y, test_size = 0.3, random_state = 42)
model = LogisticRegression().fit(X_train, y_train)
answers_pred = model.predict(X_test)

print(model.score(X_test, y_test))

#4
#Логистическая регрессия стандартизированных данных
X = df.drop(['Outcome'], axis = 1)
y = df['Outcome']
scaler = StandardScaler()
X_nore = scaler.fit_transform(X)
X_train, X_test, y_train, y_test = train_test_split(X_st, y, test_size = 0.3, random_state = 42)
model = LogisticRegression().fit(X_train, y_train)
answers_pred = model.predict(X_test)

print(model.score(X_test, y_test))

"""Нормализированныеданные справились лучше чем стандартизированных"""